/**
 * 给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
 *
 * 如果反转后整数超过 32 位的有符号整数的范围 [−231,  231 − 1] ，就返回 0。
 *
 * 假设环境不允许存储 64 位整数（有符号或无符号）。
 *
 *
 * 示例 1：
 *
 * 输入：x = 123
 * 输出：321
 * 示例 2：
 *
 * 输入：x = -123
 * 输出：-321
 * 示例 3：
 *
 * 输入：x = 120
 * 输出：21
 * 示例 4：
 *
 * 输入：x = 0
 * 输出：0
 *
 *
 * 提示：
 */
/**
 * @param {number} x
 * @return {number}
 */
var reverse = function(x) {
   let res=0
   while (x!==0){
      res=res*10+x%10
      x=(x/10)|0
   }
   /**
    * @param {number} x
    * @return {number}
    */
   return (res | 0) === res ? res : 0;

};
/**
 * var a = 3.14;
 * console.log(a | 0); // 输出 3
 *
 * var b = -5.8;
 * console.log(b | 0); // 输出 -5
 *
 * var c = 10000000000000000000000000000.12345;
 * console.log(c | 0); // 输出 2147483647 (最大的32位有符号整数)
 * 在上述示例中，通过使用| 0操作符，我们将浮点数a和b转换为32位有符号整数，并截取了它们的整数部分。对于非常大的数值c，由于超过了32位整数的表示范围，转换结果为最大的32位有符号整数。
 * 具体来说，当我们对一个数值a使用位运算符|与0进行操作时，JavaScript会将a的数值转换为32位有符号整数。这个操作会保留a的整数部分并丢弃小数部分。这种转换可以用来快速截取整数部分，而不进行四舍五入或其他舍入操作。
 * 需要注意的是，这种转换并不改变变量a的类型，它仍然是一个数值类型。只是在进行数值操作时，JavaScript会将其视为32位有符号整数进行处理。
 */
